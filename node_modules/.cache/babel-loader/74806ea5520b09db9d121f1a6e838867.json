{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Documents/github/songs/src/components/SongDetail.js\";\n// This component will not be making any changes to the state, since we are just using it to display details of a song. Since it won't change the state, we will not be using action creators here (like \"selectSong\")\n// Also since we aren't changing state, this will be a functional component instead of a class component\nimport React from \"react\"; // We can use connect in functional components too\n\nimport { connect } from \"react-redux\"; // we destructured \"song\" (the key containing the selected song) from the incoming props\n\nconst SongDetail = ({\n  song\n}) => {\n  // When this component loads up for the 1st time there will be no song currently selected so if the song doesn't exist return a div telling the user to pick one instead\n  if (!song) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, \"Select a song\");\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, song.title);\n};\n\nconst mapStateToProps = state => {\n  // From the incoming state, we want to access the \"selectedSong\" field which has the currently selected song. We assign it to a field called \"song\". We return this as a javascript object (and you will see it show up in the console in this format if you use console.log())\n  return {\n    song: state.selectedSong\n  };\n};\n\nexport default connect(mapStateToProps)(SongDetail);","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/songs/src/components/SongDetail.js"],"names":["React","connect","SongDetail","song","title","mapStateToProps","state","selectedSong"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC/B;AACA,MAAI,CAACA,IAAL,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACD;;AACD,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,IAAI,CAACC,KAAX,CAAP;AACD,CAND;;AAQA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B;AACA,SAAO;AAAEH,IAAAA,IAAI,EAAEG,KAAK,CAACC;AAAd,GAAP;AACD,CAHD;;AAIA,eAAeN,OAAO,CAACI,eAAD,CAAP,CAAyBH,UAAzB,CAAf","sourcesContent":["// This component will not be making any changes to the state, since we are just using it to display details of a song. Since it won't change the state, we will not be using action creators here (like \"selectSong\")\n// Also since we aren't changing state, this will be a functional component instead of a class component\nimport React from \"react\";\n// We can use connect in functional components too\nimport { connect } from \"react-redux\";\n\n// we destructured \"song\" (the key containing the selected song) from the incoming props\nconst SongDetail = ({ song }) => {\n  // When this component loads up for the 1st time there will be no song currently selected so if the song doesn't exist return a div telling the user to pick one instead\n  if (!song) {\n    return <div>Select a song</div>;\n  }\n  return <div>{song.title}</div>;\n};\n\nconst mapStateToProps = state => {\n  // From the incoming state, we want to access the \"selectedSong\" field which has the currently selected song. We assign it to a field called \"song\". We return this as a javascript object (and you will see it show up in the console in this format if you use console.log())\n  return { song: state.selectedSong };\n};\nexport default connect(mapStateToProps)(SongDetail);\n"]},"metadata":{},"sourceType":"module"}