{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Documents/github/songs/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\"; // The Provider is what will communicate with the Redux store you created so the App React component can access the data from the combined reducers in that store. Then the App component can pass that data to the child components\n// Provider is a component made by the react-redux library\n\nimport { Provider } from \"react-redux\"; // createStore can be used to take the code you wrote for the Redux Store (index.js in \"reducers\" folder) and actually create it\n\nimport { createStore } from \"redux\";\nimport App from \"./components/App\"; // This is the shorter way of importing the file specifically named \"index.js\" from the \"reducers\" folder. If you have other reducers then they have to be imported with another \"import\" statement\n\nimport reducers from \"./reducers\";\nReactDOM.render( // Here we enclose our App component in the Provider component so the App component can get access to the Redux Store\n// We give the Provider a \"store\" attribute which will use createStore (imported above) and actually make the Redux Store with the reducers you pass in (imported above but created by you in the \"index.js\" file in the \"reducers\" folder. That file has the multiple reducers and combines them using combineReducers so we can pass them all in with 1 variable)\nReact.createElement(Provider, {\n  store: createStore(reducers),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n})), document.querySelector(\"#root\"));","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/songs/src/index.js"],"names":["React","ReactDOM","Provider","createStore","App","reducers","render","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;AACA;;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,OAAOC,GAAP,MAAgB,kBAAhB,C,CACA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEAJ,QAAQ,CAACK,MAAT,EACE;AACA;AACA,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEH,WAAW,CAACE,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CAHF,EAMEE,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CANF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// The Provider is what will communicate with the Redux store you created so the App React component can access the data from the combined reducers in that store. Then the App component can pass that data to the child components\n// Provider is a component made by the react-redux library\nimport { Provider } from \"react-redux\";\n// createStore can be used to take the code you wrote for the Redux Store (index.js in \"reducers\" folder) and actually create it\nimport { createStore } from \"redux\";\n\nimport App from \"./components/App\";\n// This is the shorter way of importing the file specifically named \"index.js\" from the \"reducers\" folder. If you have other reducers then they have to be imported with another \"import\" statement\nimport reducers from \"./reducers\";\n\nReactDOM.render(\n  // Here we enclose our App component in the Provider component so the App component can get access to the Redux Store\n  // We give the Provider a \"store\" attribute which will use createStore (imported above) and actually make the Redux Store with the reducers you pass in (imported above but created by you in the \"index.js\" file in the \"reducers\" folder. That file has the multiple reducers and combines them using combineReducers so we can pass them all in with 1 variable)\n  <Provider store={createStore(reducers)}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"]},"metadata":{},"sourceType":"module"}