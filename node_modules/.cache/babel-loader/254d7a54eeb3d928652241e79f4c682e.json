{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Documents/github/songs/src/components/SongList.js\";\n// We also import the named export \"Component\" so when we extend in our songList component we can just say extends Component instead of React.Component, but either way is fine\nimport React, { Component } from \"react\"; // We will use connect to communicate with Provider and get the list of songs (since we are in SongList) from the Redux Store\n\nimport { connect } from \"react-redux\";\n\nclass SongList extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, \"Song List\");\n  }\n\n} // take the state object (all the data from our Redux store) and run some computations on it thats going to cause that data to show up as \"props\" inside of our component\n// Since we are taking the state from the Redux Store we pass it in as a param (before the =>)\n// The state in this case is just the entire list of songs and the currently selected song from the Redux Store\n// We will configure connect by passing in this mapStateToProps variable as the first argument\n\n\nconst mapStateToProps = state => {}; // connect uses 2 sets of parantheses here. This is b/c connect returns a function. If we wanted to just return the function we might say connect(). But to invoke that function that connect is returning we will use connect()()and you can pass in something to that 2nd pair of parantheses (in our case, it is the SongList component). You can also pass in something in the first pair of parantheses to configure connect. We pass in mapStateToProps to do that\n\n\nexport default connect(mapStateToProps)(SongList);","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/songs/src/components/SongList.js"],"names":["React","Component","connect","SongList","render","mapStateToProps","state"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC/BG,EAAAA,MAAM,GAAG;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD;;AAH8B,C,CAMjC;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAGC,KAAK,IAAI,CAAE,CAAnC,C,CAEA;;;AACA,eAAeJ,OAAO,CAACG,eAAD,CAAP,CAAyBF,QAAzB,CAAf","sourcesContent":["// We also import the named export \"Component\" so when we extend in our songList component we can just say extends Component instead of React.Component, but either way is fine\nimport React, { Component } from \"react\";\n// We will use connect to communicate with Provider and get the list of songs (since we are in SongList) from the Redux Store\nimport { connect } from \"react-redux\";\n\nclass SongList extends Component {\n  render() {\n    return <div>Song List</div>;\n  }\n}\n\n// take the state object (all the data from our Redux store) and run some computations on it thats going to cause that data to show up as \"props\" inside of our component\n// Since we are taking the state from the Redux Store we pass it in as a param (before the =>)\n// The state in this case is just the entire list of songs and the currently selected song from the Redux Store\n// We will configure connect by passing in this mapStateToProps variable as the first argument\nconst mapStateToProps = state => {};\n\n// connect uses 2 sets of parantheses here. This is b/c connect returns a function. If we wanted to just return the function we might say connect(). But to invoke that function that connect is returning we will use connect()()and you can pass in something to that 2nd pair of parantheses (in our case, it is the SongList component). You can also pass in something in the first pair of parantheses to configure connect. We pass in mapStateToProps to do that\nexport default connect(mapStateToProps)(SongList);\n"]},"metadata":{},"sourceType":"module"}